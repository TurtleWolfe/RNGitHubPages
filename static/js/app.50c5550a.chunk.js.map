{"version":3,"sources":["assets/images/logo.png","screens/NotFoundScreen.tsx","constants/Colors.ts","components/Themed.tsx","screens/TabOneScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["module","exports","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","TabOneScreen","React","selectedImage","setSelectedImage","openImagePickerAsync","a","async","ImagePicker","granted","alert","pickerResult","cancelled","localUri","uri","Image","source","thumbnail","Sharing","button","buttonText","logo","instructions","width","height","marginBottom","marginHorizontal","borderRadius","resizeMode","separator","marginVertical","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","welcomeImage","marginLeft","codeHighlightText","paddingHorizontal","TabTwoScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","Ionicons","size","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","prefixes","Linking","config","screens","Root","TabOne","TabTwo","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","console","warn","useCachedResources","StatusBar"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,kC,2zBCM5B,SAASC,EAAT,GAEuC,IADpDC,EACmD,EADnDA,WAEA,OACE,gBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,gBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,OAApB,8BACA,gBAACC,EAAA,EAAD,CAAkBC,QAAS,kBAAMR,EAAWS,QAAQ,SAASP,MAAOC,EAAOO,MACzE,gBAACL,EAAA,EAAD,CAAMH,MAAOC,EAAOQ,UAApB,wBAMR,IAAMR,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,SAChBC,QAAS,IAEXZ,MAAO,CACLa,SAAU,GACVC,WAAY,QAEdV,KAAM,CACJW,UAAW,GACXC,gBAAiB,IAEnBX,SAAU,CACRQ,SAAU,GACVI,MAAO,a,0BClCI,GACbC,MAAO,CACLC,KAAM,OACNC,WAAY,OACZC,KAPmB,UAQnBC,eAAgB,OAChBC,gBATmB,WAWrBC,KAAM,CACJL,KAAM,OACNC,WAAY,OACZC,KAbkB,OAclBC,eAAgB,OAChBC,gBAfkB,S,4DCKf,SAASE,EACdC,EACAC,GAEA,IACMC,EAAiBF,EAAK,MAE5B,OAAIE,GAGKC,EAAM,MAAQF,GAYlB,SAAS5B,EAAK2B,GAAmB,IAC9B9B,EAAgD8B,EAAhD9B,MAAOkC,EAAyCJ,EAAzCI,WAAYC,EAA6BL,EAA7BK,UAAcC,EADJ,IACmBN,EADnB,oCAE/BT,EAAQQ,EAAc,CAAEP,MAAOY,EAAYN,KAAMO,GAAa,QAEpE,OAAO,gBAAC,IAAD,KAAanC,MAAO,CAAC,CAAEqB,SAASrB,IAAYoC,IAG9C,SAASrC,EAAK+B,GAAmB,IAC9B9B,EAAgD8B,EAAhD9B,MAAOkC,EAAyCJ,EAAzCI,WAAYC,EAA6BL,EAA7BK,UAAcC,EADJ,IACmBN,EADnB,oCAE/BjB,EAAkBgB,EAAc,CAAEP,MAAOY,EAAYN,KAAMO,GAAa,cAE9E,OAAO,gBAAC,IAAD,KAAanC,MAAO,CAAC,CAAEa,mBAAmBb,IAAYoC,IC5BhD,SAASC,IAAgB,IAAD,EAEKC,WAAe,MAFpB,WAE9BC,EAF8B,KAEfC,EAFe,KAIjCC,EAAuB,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACIE,OADJ,WAGQ,IAHR,OAGJC,QAHI,uBAIvBC,MAAM,iDAJiB,4CAAAJ,EAAA,MAQAE,OARA,WAWM,KAH3BG,EARqB,QAWRC,UAXQ,mDAezBR,EAAiB,CAAES,SAAUF,EAAaG,MAfjB,8DA4B3B,OAAsB,OAAlBX,EAEA,gBAAC,EAAD,CAAMvC,MAAOC,EAAOC,WAClB,gBAACiD,EAAA,EAAD,CACEC,OAAQ,CAAEF,IAAKX,EAAcU,UAC7BjD,MAAOC,EAAOoD,YAEhB,gBAAChD,EAAA,EAAD,CAAkBC,QAhBG,oBAAAoC,EAAAC,OAAA,kEAAAD,EAAA,MACbY,OADa,wCAEvBR,MAAM,mDAFiB,4CAAAJ,EAAA,MAMnBY,IAAmBf,EAAcU,WANd,6DAgB4BjD,MAAOC,EAAOsD,QAC7D,gBAAC,EAAD,CAAMvD,MAAOC,EAAOuD,YAApB,qBAEF,gBAACnD,EAAA,EAAD,CACEC,QAASmC,EACTzC,MAAOC,EAAOsD,QACd,gBAAC,EAAD,CAAMvD,MAAOC,EAAOuD,YAApB,kBAON,gBAAC,EAAD,CAAMxD,MAAOC,EAAOC,WAClB,gBAACiD,EAAA,EAAD,CAAOC,OAAQK,IAAMzD,MAAOC,EAAOwD,OACnC,gBAAC,EAAD,CAAMzD,MAAOC,EAAOyD,cAApB,gFAGA,gBAACrD,EAAA,EAAD,CACEC,QAASmC,EACTzC,MAAOC,EAAOsD,QACd,gBAAC,EAAD,CAAMvD,MAAOC,EAAOuD,YAApB,kBAQR,IAAMvD,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,UAElB0C,KAAM,CACJE,MAAO,IACPC,OAAQ,IACRC,aAAc,IAEhBH,aAAc,CACZrC,MAAO,OACPJ,SAAU,GACV6C,iBAAkB,IAEpBP,OAAQ,CACN1C,gBAAiB,OACjBG,QAAS,GACT+C,aAAc,EACdF,aAAc,IAEhBL,WAAY,CACVvC,SAAU,GACVI,MAAO,QAETgC,UAAW,CACTM,MAAO,IACPC,OAAQ,IACRI,WAAY,UAEZH,aAAc,IAEhBzD,MAAO,CACLa,SAAU,GACVC,WAAY,QAEd+C,UAAW,CACTC,eAAgB,GAChBN,OAAQ,EACRD,MAAO,S,SCpHJ,SAASQ,EAASrC,GACvB,OAAO,gBAAC,EAAD,OAAUA,EAAV,CAAiB9B,MAAO,CAAC8B,EAAM9B,MAAO,CAAEoE,WAAY,kBCG9C,SAASC,EAAT,GAAqD,IAA3BC,EAA0B,EAA1BA,KACvC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMtE,MAAOC,EAAOsE,qBAClB,kBAAC,EAAD,CACEvE,MAAOC,EAAOuE,eACdtC,WAAW,kBACXC,UAAU,yBAHZ,qCAOA,kBAAC,EAAD,CACEnC,MAAO,CAACC,EAAOwE,uBAAwBxE,EAAOyE,oBAC9CvC,UAAU,yBACVD,WAAW,oBACX,kBAACiC,EAAD,KAAWG,IAGb,kBAAC,EAAD,CACEtE,MAAOC,EAAOuE,eACdtC,WAAW,kBACXC,UAAU,yBAHZ,mFAQF,kBAAC,EAAD,CAAMnC,MAAOC,EAAO0E,eAClB,kBAACtE,EAAA,EAAD,CAAkBC,QAASsE,EAAiB5E,MAAOC,EAAO4E,UACxD,kBAAC,EAAD,CAAM7E,MAAOC,EAAO6E,aAAc5C,WAAYD,EAAOX,MAAMG,MAA3D,6EASV,SAASmD,IACPG,IACE,0FAIJ,IAAM9E,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNC,gBAAiB,QAEnBmE,oBAAqB,CACnBnB,aAAc,GACd5C,SAAU,GACVgE,WAAY,GACZC,UAAW,UAEbC,iBAAkB,CAChBC,WAAY,IAEdC,iBAAkB,CAChBvE,WAAY,SACZK,UAAW,GACX0C,aAAc,IAEhByB,aAAc,CACZ3B,MAAO,IACPC,OAAQ,GACRI,WAAY,UACZ7C,UAAW,EACXoE,YAAa,IAEfhB,oBAAqB,CACnBzD,WAAY,SACZgD,iBAAkB,IAEpBY,mBAAoB,CAClBR,eAAgB,GAElBsB,kBAAmB,CACjBnE,MAAO,yBAEToD,uBAAwB,CACtBV,aAAc,EACd0B,kBAAmB,GAErBjB,eAAgB,CACdvD,SAAU,GACVgE,WAAY,GACZC,UAAW,UAEbP,cAAe,CACbxD,UAAW,GACX2C,iBAAkB,GAClBhD,WAAY,UAEd+D,SAAU,CACRzD,gBAAiB,IAEnB0D,aAAc,CACZI,UAAW,YCnGA,SAASQ,IACtB,OACE,gBAAC,EAAD,CAAM1F,MAAOC,EAAOC,WAClB,gBAAC,EAAD,CAAMF,MAAOC,EAAOG,OAApB,WACA,gBAAC,EAAD,CAAMJ,MAAOC,EAAOgE,UAAW/B,WAAW,OAAOC,UAAU,0BAC3D,gBAACkC,EAAD,CAAgBC,KAAK,+BAK3B,IAAMrE,EAASS,IAAWC,OAAO,CAC/BT,UAAW,CACTU,KAAM,EACNE,WAAY,SACZC,eAAgB,UAElBX,MAAO,CACLa,SAAU,GACVC,WAAY,QAEd+C,UAAW,CACTC,eAAgB,GAChBN,OAAQ,EACRD,MAAO,SClBLgC,EAAYC,cAEH,SAASC,IAGtB,OACE,gBAACF,EAAUG,UAAX,CACEC,iBAAiB,SACjBC,cAAe,CAAEC,gBAAiBhE,EAAM,MAAcR,OACtD,gBAACkE,EAAUO,OAAX,CACEC,KAAK,SACLC,UAAWC,GACXC,QAAS,CACPC,WAAY,gBAAGlF,EAAH,EAAGA,MAAH,OAAe,gBAACmF,EAAD,CAAYL,KAAK,WAAW9E,MAAOA,QAGlE,gBAACsE,EAAUO,OAAX,CACEC,KAAK,SACLC,UAAWK,GACXH,QAAS,CACPC,WAAY,gBAAGlF,EAAH,EAAGA,MAAH,OAAe,gBAACmF,EAAD,CAAYL,KAAK,WAAW9E,MAAOA,SASxE,SAASmF,EAAW1E,GAClB,OAAO,gBAAC4E,EAAA,EAAD,KAAUC,KAAM,GAAI3G,MAAO,CAAE6D,cAAe,IAAS/B,IAK9D,IAAM8E,GAAcC,cAEpB,SAASR,KACP,OACE,gBAACO,GAAYd,UAAb,KACE,gBAACc,GAAYV,OAAb,CACEC,KAAK,eACLC,UAAW/D,EACXiE,QAAS,CAAEQ,YAAa,oBAMhC,IAAMC,GAAcF,cAEpB,SAASJ,KACP,OACE,gBAACM,GAAYjB,UAAb,KACE,gBAACiB,GAAYb,OAAb,CACEC,KAAK,eACLC,UAAWV,EACXY,QAAS,CAAEQ,YAAa,oB,IClEjB,IACbE,SAAU,C,OAACC,EAAgB,MAC3BC,OAAQ,CACNC,QAAS,CACPC,KAAM,CACJD,QAAS,CACPE,OAAQ,CACNF,QAAS,CACP9E,aAAc,QAGlBiF,OAAQ,CACNH,QAAS,CACPzB,aAAc,UAKtB6B,SAAU,OCRD,SAASC,GAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,YACnC,OACE,gBAACC,EAAA,EAAD,CACEC,QAASC,GACTC,MAAuB,SAAhBJ,EAAyBK,IAAYC,KAC5C,gBAACC,GAAD,OAON,IAAMC,GAAQpB,cAEd,SAASmB,KACP,OACE,gBAACC,GAAMnC,UAAP,CAAiBoC,cAAe,CAAEC,aAAa,IAC7C,gBAACF,GAAM/B,OAAP,CAAcC,KAAK,OAAOC,UAAWP,IACrC,gBAACoC,GAAM/B,OAAP,CAAcC,KAAK,WAAWC,UAAWvG,EAAgByG,QAAS,CAAElG,MAAO,YCtBlE,SAASgI,KAItB,OCPa,WAA+B,IAAD,EACK9F,YAAe,GADpB,WACpC+F,EADoC,KACjBC,EADiB,KA0B3C,OAtBAhG,aAAgB,WACd,EAAAI,EAAAC,OAAA,gEAEI4F,MAFJ,WAAA7F,EAAA,MAKU8F,IAAA,OACD9B,IAAS+B,MADR,IAEJ,aAAcC,EAAQ,SAP5B,sDAWIC,QAAQC,KAAR,MAXJ,uBAaIN,GAAmB,GACnBC,MAdJ,mFAmBC,IAEIF,EDtBmBQ,GAOtB,kBAAC,IAAD,KACE,kBAACrB,GAAD,CAAYC,YEdX,UFeD,kBAACqB,EAAA,EAAD,OALG,O,0DGbXnJ,EAAOC,QAAU,IAA0B,kC","file":"static/js/app.50c5550a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cbca0826.png\";","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { Image, TouchableOpacity, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing';\n// import logo from './assets/logo.png'; \nimport { LogoParamList } from '../types';\nimport logo from '../assets/images/logo.png';\n// Cannot find module '../assets/images/logo.png' or its corresponding type declarations.ts(2307)\n// import EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabOneScreen() {\n\n  const [selectedImage, setSelectedImage] = React.useState(null);\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert(\"Permission to access camera roll is required!\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    // console.log(pickerResult);\n\n    if (pickerResult.cancelled === true) {\n      return;\n    }\n\n    setSelectedImage({ localUri: pickerResult.uri });\n\n  };\n\n  let openShareDialogAsync = async () => {\n    if (!(await Sharing.isAvailableAsync())) {\n      alert(`Uh oh, sharing isn't available on your platform`);\n      return;\n    }\n\n    await Sharing.shareAsync(selectedImage.localUri);\n  };\n\n  if (selectedImage !== null) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{ uri: selectedImage.localUri }}\n          style={styles.thumbnail}\n        />\n        <TouchableOpacity onPress={openShareDialogAsync} style={styles.button}>\n          <Text style={styles.buttonText}>Share this photo</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={openImagePickerAsync}\n          style={styles.button}>\n          <Text style={styles.buttonText}>Pick a photo</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Image source={logo} style={styles.logo} />\n      <Text style={styles.instructions} >\n        To share a photo from your phone with a friend, just press the button below!\n      </Text>\n      <TouchableOpacity\n        onPress={openImagePickerAsync}\n        style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n      {/* <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> */}\n      {/* <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" /> */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 305,\n    height: 159,\n    marginBottom: 10,\n  },\n  instructions: {\n    color: '#888',\n    fontSize: 18,\n    marginHorizontal: 15,\n  },\n  button: {\n    backgroundColor: \"blue\",\n    padding: 20,\n    borderRadius: 5,\n    marginBottom: 10,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\",\n    // Try switching it from contain to 'stretch' or 'cover' to see other behaviors.\n    marginBottom: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Tab One Title' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}